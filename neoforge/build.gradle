plugins {
    id "com.github.johnrengelman.shadow" version "8.1.1"
    id "me.shedaniel.unified-publishing"
    id "maven-publish"
}

configurations {
    shadowCommon
    dev
}

artifacts {
    dev(jar)
}

architectury {
    platformSetupLoomIde()
    neoForge()
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentNeoForge.extendsFrom common
}

dependencies {
    minecraft "com.mojang:minecraft:${rootProject.architectury.minecraft}"
    mappings loom.officialMojangMappings()

    neoForge "net.neoforged:neoforge:${rootProject.neoforge_version}"

    modLocalRuntime("me.shedaniel.cloth:basic-math:0.6.1")
    forgeRuntimeLibrary(shadowCommon("me.shedaniel.cloth:basic-math:0.6.1"))

    modLocalRuntime("blue.endless:jankson:${rootProject.jankson_version}")
    modLocalRuntime("com.moandjiezana.toml:toml4j:${rootProject.toml4j_version}")
    modLocalRuntime("org.yaml:snakeyaml:${rootProject.snakeyaml_version}")
    forgeRuntimeLibrary(shadowCommon("blue.endless:jankson:${rootProject.jankson_version}"))
    forgeRuntimeLibrary(shadowCommon("com.moandjiezana.toml:toml4j:${rootProject.toml4j_version}") {
        exclude(module: "gson")
    })
    forgeRuntimeLibrary(shadowCommon("org.yaml:snakeyaml:${rootProject.snakeyaml_version}"))

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionNeoForge")) { transitive false }
}

processResources {
    filesMatching("META-INF/neoforge.mods.toml") {
        expand "version": project.version
    }
    inputs.property "META-INF/neoforge.mods.toml", project.version
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "cloth-config.accessWidener"
    relocate "blue.endless.jankson", "${rootProject.maven_group}.clothconfig.shadowed.blue.endless.jankson"
    relocate "com.moandjiezana.toml", "${rootProject.maven_group}.clothconfig.shadowed.com.moandjiezana.toml"
    relocate "org.yaml.snakeyaml", "${rootProject.maven_group}.clothconfig.shadowed.org.yaml.snakeyaml"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "shadow"
}

remapJar {
    input.set(shadowJar.archiveFile)
    dependsOn(shadowJar)
    archiveClassifier = "neoforge"

    from rootProject.file("LICENSE.md")
}

publishing {
    publications {
        mavenNeoForge(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-neoforge"
            from components.java
        }
    }

    repositories {
        if (System.getenv("MAVEN_PASS") != null) {
            maven {
                url = "https://deploy.shedaniel.me/"
                credentials {
                    username = "shedaniel"
                    password = System.getenv("MAVEN_PASS")
                }
            }
        }
    }
}

unifiedPublishing {
    if (rootProject.neoforge_pr != "") return
    project {
        displayName = "[NeoForge $rootProject.supported_version] v$project.version"
        releaseType = "release"
        gameVersions = ["1.20.6"]
        gameLoaders = ["neoforge"]

        mainPublication remapJar

        if (project.hasProperty("curse_api_key") || System.getenv("curse_api_key") != null) {
            curseforge {
                token = project.hasProperty("curse_api_key") ? project.property("curse_api_key") : System.getenv("curse_api_key")
                id = project.curseforge_id
                gameVersions.addAll "Java 21"
            }
        }

        if (project.hasProperty("modrinth_key") || System.getenv("modrinth_key") != null) {
            modrinth {
                token = project.hasProperty("modrinth_key") ? project.property("modrinth_key") : System.getenv("modrinth_key")
                id = project.modrinth_id
                version = "$project.version+$project.name"
            }
        }
    }
}

rootProject.tasks.getByName("modPublish").dependsOn tasks.getByName("publishUnified")
