buildscript {
    // Done to not remap sources, since that causes the Forge subproject to crash out
    System.setProperty("fabric.loom.ci", true as String)
}

plugins {
    id "architectury-plugin" version "3.4-SNAPSHOT"
    id "dev.architectury.loom" version "1.7-SNAPSHOT" apply false
    id "me.shedaniel.unified-publishing" version "0.1.+" apply false
    id "maven-publish"
    id "org.cadixdev.licenser" version "0.6.1" apply false
}

architectury {
    minecraft = rootProject.minecraft_version
}

subprojects {
    apply plugin: "dev.architectury.loom"

    loom {
        silentMojangMappingsLicense()
    }

    repositories {
        maven { url "https://maven.neoforged.net/releases/" }
        if (rootProject.neoforge_pr != "") {
            maven {
                url "https://prmaven.neoforged.net/NeoForge/pr$rootProject.neoforge_pr"
                content {
                    includeModule("net.neoforged", "neoforge")
                }
            }
        }
        mavenLocal()
    }
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'architectury-plugin'
    apply plugin: 'org.cadixdev.licenser'

    def runNumber = (System.getenv("GITHUB_RUN_NUMBER") == null ? "9999" : System.getenv("GITHUB_RUN_NUMBER"))

    version = rootProject.base_version + "." + runNumber
    archivesBaseName = rootProject.archives_base_name

    group = rootProject.maven_group

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"

        // The Minecraft launcher currently installs Java 8 for users, so your mod probably wants to target Java 8 too
        // JDK 9 introduced a new way of specifying this that will make sure no newer classes or methods are used.
        // We'll use that if it's available, but otherwise we'll use the older option.
        options.release = 21
    }

    license {
        header = rootProject.file("HEADER")

        ext {
            name = "shedaniel"
            year = "2020 - 2021"
        }

        include "**/*.java"
        exclude "**/ScrollingContainer.java"

        ignoreFailures = true
    }
}

task licenseFormatAll
subprojects { licenseFormatAll.dependsOn("${path}:licenseFormat") }

task modPublish
