plugins {
    id "com.github.johnrengelman.shadow" version "7.0.0"
    id "com.matthewprenger.cursegradle"
    id "maven-publish"
}

loom {
    accessWidener = file("src/main/resources/cloth-config.accessWidener")
}

architectury {
    platformSetupLoomIde()
    fabric()
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

repositories {
    maven {
        url "https://maven.terraformersmc.com/releases/"
        content {
            includeGroup "com.terraformersmc"
        }
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${rootProject.architectury.minecraft}"
    mappings loom.officialMojangMappings()

    modApi "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}"

    modApi("me.shedaniel.cloth:basic-math:0.6.0")
    include("me.shedaniel.cloth:basic-math:0.6.0")

    implementation("blue.endless:jankson:${rootProject.jankson_version}")
    implementation("com.moandjiezana.toml:toml4j:${rootProject.toml4j_version}")
    implementation("org.yaml:snakeyaml:${rootProject.snakeyaml_version}")
    shadowCommon("blue.endless:jankson:${rootProject.jankson_version}")
    shadowCommon("com.moandjiezana.toml:toml4j:${rootProject.toml4j_version}") {
        exclude(module: "gson")
    }
    shadowCommon("org.yaml:snakeyaml:${rootProject.snakeyaml_version}")

    modCompileOnly("com.terraformersmc:modmenu:${mod_menu_version}") {
        transitive(false)
    }
    modRuntime("com.terraformersmc:modmenu:${mod_menu_version}") {
        transitive(false)
    }

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }
}

processResources {
    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
    inputs.property "version", project.version
}

shadowJar {
    relocate "blue.endless.jankson", "${rootProject.maven_group}.clothconfig.shadowed.blue.endless.jankson"
    relocate "com.moandjiezana.toml", "${rootProject.maven_group}.clothconfig.shadowed.com.moandjiezana.toml"
    relocate "org.yaml.snakeyaml", "${rootProject.maven_group}.clothconfig.shadowed.org.yaml.snakeyaml"
    
    configurations = [project.configurations.shadowCommon]
    classifier "shadow"
}

remapJar {
    dependsOn(shadowJar)
    input.set(shadowJar.archiveFile)
    archiveClassifier = "fabric"
    
    from rootProject.file("LICENSE.md")
}

publishing {
    publications {
        mavenFabric(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-fabric"
            artifact(remapJar.archivePath) {
                builtBy build
                classifier null
            }
        }
    }

    repositories {
        if (System.getenv("MAVEN_PASS") != null) {
            maven {
                url = "https://deploy.shedaniel.me/"
                credentials {
                    username = "shedaniel"
                    password = System.getenv("MAVEN_PASS")
                }
            }
        }
    }
}

curseforge {
    if (project.hasProperty("curse_api_key") || System.getenv("curse_api_key") != null) {
        apiKey = project.hasProperty("curse_api_key") ? project.property("curse_api_key") : System.getenv("curse_api_key")
        project {
            id = project.curseforge_id_fabric
            releaseType = "beta"
            addGameVersion "1.18"
            addGameVersion "1.18-Snapshot"
            addGameVersion "Java 17"
            addGameVersion "Fabric"
            // may be needed in the future, but not right now
            /*relations {
                requiredDependency "fabric-api"
            }*/
            mainArtifact(remapJar.archivePath) {
                displayName = "[Fabric $rootProject.supported_version] v$project.version"
            }
            afterEvaluate {
                uploadTask.dependsOn("build")
            }
        }
    }
    options {
        forgeGradleIntegration = false
        javaVersionAutoDetect = false
    }
}

rootProject.tasks.getByName("curseforgePublish").dependsOn tasks.getByName("curseforge")
